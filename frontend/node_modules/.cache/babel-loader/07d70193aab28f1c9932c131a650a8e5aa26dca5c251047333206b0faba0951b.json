{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n    this._authorization = options.headers.authorization;\n  }\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  }\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: {\n        authorization: this._authorization\n      }\n    }).then(this._checkResponse);\n  }\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: {\n        authorization: this._authorization\n      }\n    }).then(this._checkResponse);\n  }\n  getAllInfo() {\n    return Promise.all([this.getUserInfo(), this.getInitialCards()]);\n  }\n  patchUserAvatar(inputValue) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: inputValue.avatar\n      })\n    }).then(this._checkResponse);\n  }\n  patchUserInfo(inputValue) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: inputValue.name,\n        about: inputValue.about\n      })\n    }).then(this._checkResponse);\n  }\n  postCard(inputValue) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: inputValue.name,\n        link: inputValue.link\n      })\n    }).then(this._checkResponse);\n  }\n  deleteCard(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._authorization\n      }\n    });\n  }\n  putLike(cardId, isLiked) {\n    if (isLiked) {\n      return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n        method: 'PUT',\n        headers: {\n          authorization: this._authorization\n        }\n      }).then(this._checkResponse);\n    } else {\n      return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n        method: 'DELETE',\n        headers: {\n          authorization: this._authorization\n        }\n      }).then(this._checkResponse);\n    }\n  }\n  deleteLike(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._authorization\n      }\n    }).then(this._checkResponse);\n  }\n}\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-51',\n  headers: {\n    authorization: '3d5cca3f-8a8e-42db-8df2-befb64932740',\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","options","_baseUrl","baseUrl","_headers","headers","_authorization","authorization","_checkResponse","res","ok","json","Promise","reject","status","getInitialCards","fetch","then","getUserInfo","getAllInfo","all","patchUserAvatar","inputValue","method","body","JSON","stringify","avatar","patchUserInfo","name","about","postCard","link","deleteCard","cardId","putLike","isLiked","deleteLike","api"],"sources":["/Users/mihailpestov/Desktop/dev/react-mesto-auth/src/utils/Api.js"],"sourcesContent":["class Api {\n    constructor(options) {\n        this._baseUrl = options.baseUrl;\n        this._headers = options.headers;\n        this._authorization = options.headers.authorization;\n    }\n\n    _checkResponse(res) {\n        if (res.ok) {\n            return res.json();\n        } else {\n            return Promise.reject(`Ошибка: ${res.status}`);\n        }\n    }\n\n    getInitialCards() {\n        return fetch(`${this._baseUrl}/cards`, {\n            headers: {\n                authorization: this._authorization\n            }\n        })\n            .then(this._checkResponse);\n    }\n\n    getUserInfo() {\n        return fetch(`${this._baseUrl}/users/me`, {\n            headers: {\n                authorization: this._authorization\n            }\n        })\n            .then(this._checkResponse)\n    }\n\n    getAllInfo() {\n        return Promise.all([this.getUserInfo(), this.getInitialCards()]);\n    }\n\n    patchUserAvatar(inputValue) {\n        return fetch(`${this._baseUrl}/users/me/avatar`, {\n            method: 'PATCH',\n            headers: this._headers,\n            body: JSON.stringify({\n                avatar: inputValue.avatar,\n            })\n        })\n            .then(this._checkResponse)\n    }\n\n    patchUserInfo(inputValue) {\n        return fetch(`${this._baseUrl}/users/me`, {\n            method: 'PATCH',\n            headers: this._headers,\n            body: JSON.stringify({\n                name: inputValue.name,\n                about: inputValue.about\n            })\n        })\n            .then(this._checkResponse)\n    }\n\n    postCard(inputValue) {\n        return fetch(`${this._baseUrl}/cards`, {\n            method: 'POST',\n            headers: this._headers,\n            body: JSON.stringify({\n                name: inputValue.name,\n                link: inputValue.link\n            })\n        })\n            .then(this._checkResponse)\n    }\n\n    deleteCard(cardId) {\n        return fetch(`${this._baseUrl}/cards/${cardId}`, {\n            method: 'DELETE',\n            headers: {\n                authorization: this._authorization\n            }\n        })\n    }\n\n    putLike(cardId, isLiked) {\n        if (isLiked) \n        {return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n            method: 'PUT',\n            headers: {\n                authorization: this._authorization\n            }\n        })\n            .then(this._checkResponse)}\n            else {\n                return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n                    method: 'DELETE',\n                    headers: {\n                        authorization: this._authorization\n                    }\n                })\n                    .then(this._checkResponse)\n            }\n    }\n\n    deleteLike(cardId) {\n        return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n            method: 'DELETE',\n            headers: {\n                authorization: this._authorization\n            }\n        })\n            .then(this._checkResponse)\n    }\n}\n\nconst api = new Api(\n    {\n        baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-51',\n        headers: {\n            authorization: '3d5cca3f-8a8e-42db-8df2-befb64932740',\n            'Content-Type': 'application/json'\n        }\n    }\n);\n\nexport default api;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}